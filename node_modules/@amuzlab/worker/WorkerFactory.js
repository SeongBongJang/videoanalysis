'use strict'

const fs = require('fs'),
    utils = require('@amuzlab/utils'),
    {WorkerLoadError} = require('./error')

/**
 * @class               WorkerFactory
 * @classdesc           Worker instance 생성 모듈<br/>
 *                      singleton class
 * @hideconstructor
 * @since       1.0.0
 * @date        2020-01-28
*/
class WorkerFactory {
    constructor () {
        Object.defineProperties(
            this,
            {
                /**
                 * @name        _map
                 * @memberof    WorkerFactory
                 * @desc        serviceType과 Worker가 매핑된 정보<br/>
                 *              처음 로딩 전에는 Worker 모듈 경로 정보만 매핑되어 있고 로딩 후에는 모듈 constructor를 로딩
                 * @type        {Map<String, String|Worker>}
                 * @private
                 * @instance
                 * @since       1.0.0
                 * @date        2020-01-28
                */
                _map: {
                    value: new Map()
                }
            })
    }

    /**
     * @name        get:map
     * @memberof    WorkerFactory
     * @desc        serviceType과 Worker가 매핑된 정보 리턴
     * @function
     * @public
     * @instance
     * @returns     {Map<String, String|Worker>}    serviceType과 Worker가 매핑된 정보
     * @since       1.0.0
     * @date        2020-01-28
    */
    get map () {
        return this._map
    }

    /**
     * @name        set:map
     * @memberof    WorkerFactory
     * @desc        serviceType과 Worker가 매핑된 정보 세팅
     * @function
     * @public
     * @instance
     * @throws      {WorkerLoadError}     Worker 모듈 위치에 접근할 수 없음
     * @since       1.0.0
     * @date        2020-01-28
    */
    set map (map) {
        utils.forEach(
            map,
            (workerPath, serviceType) => {
                try {
                    fs.statSync(workerPath)
                    this.map.set(serviceType, workerPath)
                } catch (err) {
                    throw new WorkerLoadError({
                        msg: `does not access Worker (worker path : ${workerPath}, serviceType : ${serviceType})`,
                        serviceType,
                        workerPath,
                        err
                    })
                }
            })
    }

    /**
     * @name        getWorker
     * @memberof    WorkerFactory
     * @desc        job.serviceType에 해당하는 Worker instance를 생성하여 리턴
     * @function
     * @public
     * @instance
     * @returns     {Worker}    serviceType에 해당하는 Worker instance
     * @throws      {WorkerLoadError}     Worker 로딩 실패
     * @throws      {WorkerLoadError}     serviceType에 해당하는 Worker가 없음
     * @since       1.0.0
     * @date        2020-01-28
    */
    getWorker (job) {
        let worker = this.map.get(job.serviceType),
            workerPath, err

        if (worker) {
            if (typeof worker === 'string') {
                try {
                    workerPath = worker
                    fs.statSync(workerPath)
                    worker = require(workerPath)
                    this.map.set(job.serviceType, worker)
                } catch (_err) {
                    err = new WorkerLoadError({
                        msg: `Worker loading failed (worker path : ${workerPath}, err : ${_err.message})`,
                        serviceType: job.serviceType,
                        workerPath,
                        err: _err
                    })
                }
            }
        } else {
            err = new WorkerLoadError({
                msg: `does not exist Worker (serviceType : ${job.serviceType})`,
                serviceType: job.serviceType
            })
        }

        if (err) {
            throw err
        } else {
            return new worker()
        }
    }
}

module.exports = exports = new WorkerFactory()
