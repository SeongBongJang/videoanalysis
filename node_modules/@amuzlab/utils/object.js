'use strict'

const util = require('./util')

Object.defineProperties(
    exports,
    {
        filter: {
            enumerable: true,
            value: (obj, filter, mapper, thisArg) => {
                arguments.length === 3 ? ((mapper && typeof mapper === 'object') ? (thisArg = mapper) : null) : null
                const isMapperFn = typeof mapper === 'function'

                return typeof filter === 'function' ? util.reduce(
                    obj,
                    (_obj, v, k, obj) => (
                        filter.call(thisArg, v, k, obj) ? (_obj[k] = isMapperFn ? mapper.call(thisArg, v, k, obj) : v) : null,
                        _obj), {}) : {}
            }
        },
        isEmptyObject: {
            enumerable: true,
            value: obj => (obj && typeof obj == 'object') ? Object.keys(obj).length === 0 : false
        },
        createDescriptor: {
            enumerable: true,
            value: (value, descriptor) => {
                value && typeof value === 'object' && ((value.hasOwnProperty('get') && typeof value.get === 'function') || (value.hasOwnProperty('set') && typeof value.set === 'function')) ? (descriptor = value, value = null) : null

                return Object.assign(
                    {},
                    descriptor,
                    (value !== null && value !== undefined) ? { value: value } : {})
            }
        },
        curriedCreateDescriptor: {
            enumerable: true,
            value: descriptor => util.curryR(exports.createDescriptor, descriptor)
        },
        createDescriptors: {
            enumerable: true,
            value: (values, descriptor) => {
                let _descriptors = {},
                    _curriedCreateDescriptor

                return arguments.length >= 1 && (Array.isArray(values) || typeof values === 'object') ? (
                    _curriedCreateDescriptor = exports.curriedCreateDescriptor(descriptor),
                    util.forEach(
                        values,
                        (v, k) => (Array.isArray(values) ? (k = v[0], v = v[1]) : null, _descriptors[k] = _curriedCreateDescriptor(v))),
                    _descriptors) : _descriptors
            }
        },
        defineProperties: {
            enumerable: true,
            value: (target, values, descriptor) => (arguments.length >= 2 && target && (typeof target === 'object' || typeof target === 'function')) ? (Object.defineProperties(target, exports.createDescriptors(values, descriptor)), target) : target
        },
        setValue: {
            enumerable: true,
            value: (obj, key, value) => {
                switch (true) {
                    case obj && typeof obj === 'object' && /(string|number)/i.test(typeof key):
                        _setValue(obj, key, value);
                        break;
                }

                function _setValue (obj, key, value){
                    return some(obj, (v, k) => k == key ? (obj[k] = value, true) : (v && typeof v === 'object' ? _setValue(v, key, value) : false));
                }

                return obj
            }
        },
        isExistProperties: {
            enumerable: true,
            value: (obj, properties) => {
                let result = []

                util.forEach(
                    obj,
                    (v, k) => properties.some(property => property.name === k) ? result.push(k) : null)

                return result
            }
        }
    })
