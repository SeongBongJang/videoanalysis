'use strict'

const INT = /^[-+]?[0-9]+$/,
    P_INT = /^[+]?[0-9]+$/,
    N_INT = /^[-]?[0-9]+$/,
    FLOAT = /^[-+]?[0-9]*.[0-9]+$/,
    P_FLOAT = /^[+]?[0-9]*.[0-9]+$/,
    N_FLOAT = /^[-]?[0-9]*.[0-9]+$/

Object.defineProperties(
    exports,
    {
        isInt: {
            enumerable: true,
            value: (target, isStrict) => isStrict ? typeof target === 'number' : INT.test(target)
        },
        isPositiveInt: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = P_INT.test(target)
                return isStrict ? result = typeof target === 'number' : null, result
            }
        },
        isNagativeInt: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = N_INT.test(target)
                return isStrict ? result = typeof target === 'number' : null, result
            }
        },
        isFloat: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = FLOAT.test(target)
                return isStrict ? result = typeof target === 'function' : null, result
            }
        },
        isPositiveFloat: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = P_FLOAT.test(target)
                return isStrict ? result = typeof target === 'function' : null, result
            }
        },
        isNagativeFloat: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = N_FLOAT.test(target)
                return isStrict ? result = typeof target === 'function' : null, result
            }
        },
        isString: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = typeof target === 'string'
                return isStrict ? result = target !== '' : null, result
            }
        },
        isFunction: {
            enumerable: true,
            value: target => typeof target === 'function'
        },
        isObject: {
            enumerable: true,
            value: target => target && typeof target === 'object'
        },
        isArray: {
            enumerable: true,
            value: (target, isStrict) => {
                let result = exports.isObject(target, true) && target.hasOwnProperty('length')
                return isStrict ? (result = Array.isArray(target)) : null, result
            }
        },
        isTrue: {
            enumerable: true,
            value: target => {
                let result = false

                switch (typeof target) {
                    case 'boolean':
                        result = target
                        break
                    case 'string':
                        result = /^(y|true|yes)$/i.test(target)
                        break
                    case 'number':
                        result = target !== 0
                        break
                }

                return result
            }
        }
    })
