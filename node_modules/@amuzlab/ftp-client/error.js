'use strict'

/**
 * @module      error
 * @since       0.0.1
 * @desc        ftp-client 모듈의 에러를 정의한 모듈
 * @author      예장해
 * @date        2019-01-23
*/

/**
 * @since       0.0.1
 * @name        ERROR_CODE
 * @public
 * @static
 * @readonly
 * @type        {Object}
 * @desc        ftp-client 모듈의 에러 코드를 정의
 * @author      예장해
 * @date        2019-01-23
 * @prop        {Integer}   ERROR_CODE.ERROR=640                    - ftp-client 모듈의 정의되지 않은 오류
 * @prop        {Integer}   ERROR_CODE.TIMEOUT=641                  - TIMEOUT 에러
 *                                                                    <ul>
 *                                                                      <li>IP가 맞지 않음
 *                                                                      <li>방화벽은 열려 있으나 포트가 열려 있지 않음
 *                                                                    </ul>
 * @prop        {Integer}   ERROR_CODE.HOST_UNSEARCH=642            - 서버를 찾지 못하는 에러<br/>
 *                                                                    <ul>
 *                                                                      <li>포트는 열려 있으나 방화벽으로 막힘
 *                                                                    </ul>
 * @prop        {Integer}   ERROR_CODE.LOGIN_FAIL=643               - 로그인 에러<br/>
 * @prop        {Integer}   ERROR_CODE.CREATE_DIR_FAIL=644          - 디렉터리 생성 실패<br/>
 * @prop        {Integer}   ERROR_CODE.NOT_EXIST_FILE_OR_DIR=645    - 파일이나 디렉터리가 없음<br/>
*/
const ERROR_CODE = Object.create(
    null,
    {
        /**
         * @since       0.0.1
         * @public
         * @constant
         * @author      예장해
        */
        ERROR: {
            enumerable: true,
            value: 640
        },
        /**
         * @since       0.0.1
         * @public
         * @constant
         * @author      예장해
        */
        TIMEOUT: {
            enumerable: true,
            value: 641
        },
        /**
         * @since       0.0.1
         * @public
         * @constant
         * @author      예장해
        */
        HOST_UNSEARCH: {
            enumerable: true,
            value: 642
        },
        /**
         * @since       0.0.1
         * @public
         * @constant
         * @author      예장해
        */
        LOGIN_FAIL: {
            enumerable: true,
            value: 643
        },
        /**
         * @since       0.0.1
         * @public
         * @constant
         * @author      예장해
        */
        CREATE_DIR_FAIL: {
            enumerable: true,
            value: 644
        },
        /**
         * @since       0.0.1
         * @public
         * @constant
         * @author      예장해
        */
        NOT_EXIST_FILE_OR_DIR: {
            enumerable: true,
            value: 645
        }
    })

Object.defineProperties(
    exports,
    {
        ERROR_CODE: {
            enumerable: true,
            value: ERROR_CODE
        },
        /**
         * @name        getErrorCode
         * @function
         * @public
         * @static
         * @desc        ftp-client 모듈의 내부적인 에러를 외부의 정의된 에러로 치환하여 리턴
         * @since       0.0.1
         * @author      예장해
         * @date        2019-01-23
         * @param       {Error} err - 발생된 에러
         * @return      {Error} ERROR_CODE로 정의된 에러
         * @example
         * // 호출 사용
         * const error = require('error')
         *
         * err => {
         *     throw error.getErrorCode(err)
         * }
         *
         * err => {
         *     console.error(error.getErrorCode(err))
         * }
        */
        getErrorCode: {
            enumerable: true,
            value: err => {
                let _err

                switch (err.errno) {
                    case 'ECONNREFUSED':
                    case 'ENOTFOUND':
                    case 'ETIMEDOUT':
                        _err = new Error('서버와 연결을 실패했습니다.')
                        _err.code = ERROR_CODE.TIMEOUT
                        break
                    case 'EHOSTUNREACH':
                        _err = new Error('서버를 찾을 수 없습니다.')
                        _err.code = ERROR_CODE.HOST_UNSEARCH
                        break;
                    default:
                        switch (err.code) {
                            case 530:
                                _err = new Error('서버로 로그인을 실패했습니다.')
                                _err.code = ERROR_CODE.LOGIN_FAIL
                                break;
                            case 550:
                                _err = new Error('디렉토리 생성을 실패했습니다.')
                                _err.code = ERROR_CODE.CREATE_DIR_FAIL
                                break
                            case 'ENOENT':
                                _err = new Error('파일이나 디렉터리가 없습니다.')
                                _err.code = ERROR_CODE.NOT_EXIST_FILE_OR_DIR
                                break
                            default:
                                switch (true) {
                                    case err.message.match(/timeout/i) !== null:
                                        _err = new Error('서버와 연결을 실패했습니다.')
                                        _err.code = ERROR_CODE.TIMEOUT
                                        break
                                    default:
                                        _err = new Error('FTP 오류가 발생했습니다.')
                                        _err.code = ERROR_CODE.ERROR
                                }
                        }
                }

                _err.err = err

                return _err
            }
        }
    })
