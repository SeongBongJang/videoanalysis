'use strict'

/**
 * @module  network/util
 * @desc    network 관련 세팅 모듈<br/>
 * @public
 * @since   1.0.0
 * @date    2020-01-16
*/
const exec = require('child_process').exec,
    os = require('os')

Object.defineProperties(
    exports,
    {
        /**
         * @name        upInterface
         * @function
         * @desc        network interface up
         * @public
         * @static
         * @readonly
         * @since       0.0.2
         * @param       {Object}    interfaceInfo               - network interface 정보
         * @param       {String}    interfaceInfo.name          - network interface 명
         * @param       {String=}   interfaceInfo.ipaddr        - network IP ADDRESS
         * @param       {String=}   interfaceInfo.netmask       - network interface netmask
         * @param       {String=}   interfaceInfo.gateway       - network interface gateway
         * @param       {Number=}   [interfaceInfo.timeout=0]   - command timeout
        */
        upInterface: {
            enumerable: true,
            value: interfaceInfo => execInterfaceCommand(interfaceInfo, 'up')
        },
        /**
         * @name        downInterface
         * @function
         * @desc        network interface down
         * @public
         * @static
         * @readonly
         * @since       0.0.2
         * @param       {Object}    interfaceInfo               - network interface 정보
         * @param       {String}    interfaceInfo.name          - network interface 명
         * @param       {String=}   interfaceInfo.ipaddr        - network IP ADDRESS
         * @param       {String=}   interfaceInfo.netmask       - network interface netmask
         * @param       {String=}   interfaceInfo.gateway       - network interface gateway
         * @param       {Number=}   [interfaceInfo.timeout=0]   - command timeout
        */
        downInterface: {
            enumerable: true,
            value: interfaceInfo => execInterfaceCommand(interfaceInfo, 'down')
        },
        /**
         * @name        isUpInterface
         * @function
         * @desc        network interface 가 UP 상태인지 DOWN 상태인지 확인
         * @public
         * @static
         * @readonly
         * @since       0.0.2
         * @param       {String|Array}    name              - network interface name
        */
        isRunningInterface: {
            enumerable: true,
            value: name => {
                let interfaces, result

                if (typeof name === 'string' || Array.isArray(name)) {
                    try {
                        interfaces = os.networkInterfaces()

                        if (Array.isArray(name)) {
                            result = name.reduce(
                                (result, name) => {
                                    if (interfaces[name]) {
                                        result.running.push({
                                            name: name,
                                            IPv4: interfaces[name].find(info => info.family === 'IPv4'),
                                            IPv6: interfaces[name].find(info => info.family === 'IPv6')
                                        })
                                    } else {
                                        result.notRunning.push(name)
                                    }

                                    return result
                                },
                                {
                                    running: [],
                                    notRunning: []
                                })
                        } else {
                            result = interfaces[name] ? interfaces[name] : null
                        }

                        return result
                    } catch (err) {
                        result = new Error('network interface 정보 조회를 실패했습니다.')
                        result.err = err

                        throw result
                    }
                } else {
                    throw new Error(`전달된 인터페이스명이 String 또는 Array 타입이 아닙니다. (name : ${name})`)
                }
            }
        }
    })

/**
 * @name        downInterface
 * @function
 * @desc        network interface down
 * @private
 * @static
 * @since       0.0.2
 * @param       {Object}    interfaceInfo               - network interface 정보
 * @param       {String}    interfaceInfo.name          - network interface 명
 * @param       {String=}   interfaceInfo.ipaddr        - network IP ADDRESS
 * @param       {String=}   interfaceInfo.netmask       - network interface netmask
 * @param       {String=}   interfaceInfo.gateway       - network interface gateway
 * @param       {Number=}   [interfaceInfo.timeout=0]   - command timeout
 * @param       {String}    action                      - up 또는 down
*/
function execInterfaceCommand (interfaceInfo, action) {
    return interfaceInfo ? new Promise((resolve, reject) => {
        let command

        if (typeof interfaceInfo.name === 'string') {
            command = [
                'ifconfig',
                interfaceInfo.name
            ]

            if (typeof interfaceInfo.ipaddr === 'string') {
                command.push(interfaceInfo.ipaddr)
            }

            if (typeof interfaceInfo.netmask === 'string') {
                command = command.concat('netmask', interfaceInfo.netmask)
            }

            if (typeof interfaceInfo.gateway === 'string') {
                command = command.concat('gw', interfaceInfo.gateway)
            }

            command.push(action)

            exec(
                command.join(' '),
                typeof interfaceInfo.timeout === 'number' && interfaceInfo.timeout > 0 ? {
                    timeout: interfaceInfo.timeout
                } : {},
                (err, stdout, stderr) => {
                    if (err) {
                        reject(err)
                    } else {
                        resolve()
                    }
                })
        } else {
            reject(new Error(`interfaceInfo.name이 String 타입이 아닙니다. (interfaceInfo.name : ${interfaceInfo.name})`))
        }
    }) : Promise.reject(new Error(`interfaceInfo가 없습니다. (interfaceInfo : ${interfaceInfo})`))
}

/*exports.downInterface({
    name: 'enp3s0:0',
    ipaddr: '192.168.0.100',
    netmask: '255.255.255.0'
})
    .then(() => console.log('success'))
    .catch(err => console.error(err))*/

//console.log(exports.isRunningInterface('bond0'))
