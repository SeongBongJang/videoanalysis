'use strict'

/**
 * @module      gpu/nvidia/load-balancer
 * @desc        GPU Load balancing 모듈<br/>
 *              전달된 load balancing 타입으로 GPU 정보를 조회하여 리턴
 * @since       1.0.0
 * @date        2020-01-16
*/
const gpuInfoGetter = require('../gpu-info-getter'),
    roundRobin = require('./round-robin'),
    processCount = require('./process-count'),
    memoryUsage = require('./memory-usage')

Object.defineProperties(
    exports,
    {
        /**
         * @name        getGPU
         * @desc        호출 되는 시점에 할당된 프로세스 개수가 가장 적은 GPU 리턴
         * @function
         * @static
         * @public
         * @param       {Function|Number|String}    algorithm   - gpu 정보를 조회할 기준<br/>
         *                                                        <ul>
         *                                                          <li>Function : callback 함수가 true를 리턴하는 GPU의 정보를 리턴 (parameter : gpu)</li>
         *                                                          <li>Number : deviceNo가 전달된 값과 동일한 GPU 정보 리턴</li>
         *                                                          <li>String : 정의된 Load balancing algorithm을 사용하여 GPU 정보 리턴</li>
         *                                                        </ul>
         * @returns     {Object}    gpu     전달된 기준에 의해 조회된 GPU 정보
         * @throws      {Error}     전달된 값에 해당하는 load balancing algorithm이 없음
         * @throws      {Error}     사용 가능한 GPU가 없음 (nvidia-smi로 조회했을 때, GPU가 없는 경우)
         * @since       1.0.0
         * @date        2020-01-20
         * @see         {@link module:gpu/abstract-gpu-module.getGPU abstract-gpu-module.getGPU}
        */
        getGPU: {
            enumerable: true,
            value: algorithm => {
                let fn

                switch (true) {
                    case /^ROUND_ROBIN$/i.test(algorithm):
                        fn = roundRobin.getGPU
                        break
                    case /^PROCESS_COUNT$/i.test(algorithm):
                        fn = processCount.getGPU
                        break
                    case /^MEMORY_USAGE$/i.test(algorithm):
                        fn = memoryUsage.getGPU
                        break
                }

                return gpuInfoGetter.gpus
                    .then(data => {
                        if (data.gpus.length > 0) {
                            switch (true) {
                                case typeof algorithm === 'function':
                                    return data.gpus.find(gpu => algorithm(gpu))
                                case typeof fn === 'function':
                                    return fn(data.gpus)
                                case typeof algorithm === 'number':
                                    return data.gpus.find(gpu => gpu.deviceNo === algorithm)
                                default:
                                    throw new Error(`Not supported load balancing algorithm (algorithm : ${algorithm})`)
                            }
                        } else {
                            throw new Error('No GPU available')
                        }
                    })
            }
        }
    })
