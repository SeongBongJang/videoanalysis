'use strict'

/**
 * @module      gpu/nvidia/xml-parser
 * @desc        nvidia-smi를 통해 GPU 정보를 조회
 * @since       0.0.1
 * @date        2019-02-26
 * @see         {@link https://developer.download.nvidia.com/compute/DCGM/docs/nvidia-smi-367.38.pdf nvidia-smi}
*/
const path = require('path'),
    utils = require('@amuzlab/utils'),
    parser = require('fast-xml-parser')

Object.defineProperties(
    exports,
    {
        /**
         * @name    parseGPUInfo
         * @desc    gpu 상태 정보 조회
         * @function
         * @static
         * @public
         * @param   {String}            data    - nvidia-smi 를 통해 조회된 xml 데이터
         * @param   {module:config}     config  - 설정 모듈
         * @returns {Object}            gpu 정보
         * @since   1.0.0
         * @date    2020-01-16
        */
        parseGPUInfo: {
            enumerable: true,
            value: (data, config) => {
                data = parser.parse(data)

                Array.isArray(data.nvidia_smi_log.gpu) || (data.nvidia_smi_log.gpu = [data.nvidia_smi_log.gpu])

                return {
                    driverVersion: data.nvidia_smi_log.driver_version,
                    cudaVersion: data.nvidia_smi_log.cuda_version,
                    gpus: utils.map(
                        data.nvidia_smi_log.gpu,
                        gpu => ({
                            uuid: gpu.uuid,
                            deviceNo: gpu.minor_number,
                            productName: gpu.product_name,
                            pci: getPCI(gpu.pci, config),
                            fanSpeed: normalize(gpu.fan_speed, config),
                            performanceState: gpu.performance_state,
                            persistenceMode: /Enabled/i.test(gpu.persistence_mode),
                            accounting: {
                                mode: /Enabled/i.test(gpu.accounting_mode),
                                bufferSize: parseInt(gpu.accounting_mode_buffer_size)
                            },
                            usage: {
                                gpu: normalize(gpu.utilization.gpu_util, config),
                                memory: Object.assign(
                                    {
                                        per: Math.floor(normalize(gpu.fb_memory_usage.used, {isDisplayUnit: false}) / normalize(gpu.fb_memory_usage.total, {isDisplayUnit: false}) * 100)
                                    },
                                    utils.forEach(
                                        gpu.fb_memory_usage,
                                        (value, key, obj) => obj[key] = normalize(value, config))),
                                encoder: normalize(gpu.utilization.encoder_util, config),
                                decoder: normalize(gpu.utilization.decoder_util, config)
                            },
                            encoderStats: getEncoderStats(gpu.encoder_stats, config),
                            temperature: normalize(gpu.temperature.gpu_temp, config),
                            power: getPower(gpu.power_readings, config),
                            computeMode: gpu.compute_mode,
                            processes: gpu.processes.process_info ? (
                                Array.isArray(gpu.processes.process_info) ? utils.map(
                                    gpu.processes.process_info,
                                    processInfo => getProcess(processInfo, config)) : [getProcess(gpu.processes.process_info, config)]) : []
                        }))
                }
            }
        }
    })

/**
 * @name    getProcess
 * @desc    gpu에 할당된 process 정보를 추출하여 리턴
 * @function
 * @static
 * @private
 * @param   {Object}            process     - 파싱된 데이터의 process 데이터
 * @param   {module:config}     config      - 설정 모듈
 * @returns {Object}    gpu에 할당된 process 정보
 * @since   1.0.0
 * @date    2020-01-16
*/
function getProcess (process, config) {
    return {
        pid: process.pid,
        type: process.type,
        name: path.basename(process.process_name),
        fullName: process.process_name,
        memoryUsage: normalize(process.used_memory, config)
    }
}

/**
 * @name    getPower
 * @desc    gpu의 power 정보를 추출하여 리턴
 * @function
 * @static
 * @private
 * @param   {Object}            power       - 파싱된 데이터의 power 데이터
 * @param   {module:config}     config      - 설정 모듈
 * @returns {Object}    gpu의 power 정보
 * @since   1.0.0
 * @date    2020-01-16
*/
function getPower (power, config) {
    return {
        state: power.power_state,
        limit: normalize(power.power_limit, config),
        power: normalize(power.power_draw, config)
    }
}

/**
 * @name    getPCI
 * @desc    gpu가 설치된 PCI 정보를 리턴
 * @function
 * @static
 * @private
 * @param   {Object}            pci         - 파싱된 데이터의 pci 데이터
 * @param   {module:config}     config      - 설정 모듈
 * @returns {Object}    gpu가 설치된 PCI 정보
 * @since   1.0.0
 * @date    2020-01-16
*/
function getPCI (pci, config) {
    return {
        busId: pci.pci_bus_id
    }
}

/**
 * @name    getEncoderStats
 * @desc    gpu 정보중 encoder 상태 정보 리턴
 * @function
 * @static
 * @private
 * @param   {Object}            encoderStats    - 파싱된 데이터의 encoder 상태 정보
 * @param   {module:config}     config          - 설정 모듈
 * @returns {Object}    encoder 상태 정보
 * @since   1.0.0
 * @date    2020-01-16
*/
function getEncoderStats (encoderStats, config) {
    return {
        sessionCount: encoderStats.session_count,
        averageFps: encoderStats.average_fps,
        averageLatency: encoderStats.average_latency
    }
}

/**
 * @name    normalize
 * @desc    config.isDisplayUnit 설정이 true면 데이터에 단위를 붙이고 false면 데이터에서 단위를 제거
 * @function
 * @static
 * @private
 * @param   {String}            data        - 데이터
 * @param   {module:config}     config      - 설정 모듈
 * @returns {any}               normalize된 데이터
 * @since   1.0.0
 * @date    2020-01-16
*/
function normalize (data, config) {
    return config.isDisplayUnit ? data : parseFloat(data.match(/\d{1,}/).shift())
}
