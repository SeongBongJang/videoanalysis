'use strict'

const winston = require('winston'),
    level = require('./level'),
    path = require('path'),
    os = require('os'),

    DEFAULT = Object.create(
        null,
        {
            TIME_FORMAT: {
                enumerable: true,
                value: 'YYYY-MM-DD HH:mm:ss'
            },
            MAX_LOG_SIZE: {
                enumerable: true,
                value: '50m'
            },
            MAX_FILES: {
                enumerable: true,
                value: '100'
            },
            LOG_FILE_NAME: {
                enumerable: true,
                value: 'out_%DATE%.log'
            },
            DATE_PATTERN: {
                enumerable: true,
                value: 'YYYY-MM-DD'
            },
            LOG_DIR: {
                enumerable: true,
                value: path.join(os.homedir(), 'logs')
            }
        })

require('winston-daily-rotate-file')

/**
 * @alias       logger~Logger
 * @classdesc   Logging 기능을 수행하는 class
 * @since       0.0.1
 * @author      예장해
 * @see         {@link https://www.npmjs.com/package/winston winston}
 * @see         {@link https://www.npmjs.com/package/winston-daily-rotate-file winston-daily-rotate-file}
 * @requires    {@link https://nodejs.org/en/docs/ Node.js 8.x 이상 버전}
 * @requires    {@link https://www.npmjs.com/package/winston winston}
 * @requires    {@link https://www.npmjs.com/package/winston-daily-rotate-file winston-daily-rotate-file}
 * @requires    {@link module:level level}
 * @example
 * const Logger = require('Logger'),
 *       logger = new Logger({
 *           level: 'debug',
 *           timestamp: true,
 *           timeFormat: 'YYYY-MM-DD HH:mm:ss',
 *           logDir: '/log',
 *           logFileName: 'out',
 *           datePattern: 'YYYY-MM-DD',
 *           maxSize: '50m',
 *           maxFiles: '10d'
 *       })
 *
 * logger.debug('log message')
 * logger.info('log message %s', 'test')
*/
class Logger {
    /**
     * @param       {Object=}           config                                  - Log 설정 데이터
     * @param       {String=}           [config.level=info]                     - Log level<br/>
     *                                                                            설정된 level보다 높은 level의 로그는 남지 않음
     * @param       {Boolean=}          [config.timestamp=true]                 - Log 메시지 날짜 출력 여부
     * @param       {String=}           [config.timeFormat=YYYY-MM-DD HH:mm:ss] - Log 메시지 날짜 포맷
     * @param       {String=}           [config.transport=console]              - Log 출력 타입 (file, console)
     * @param       {String=}           [config.logDir=$HOME/logs]              - Log 파일 경로
     * @param       {String=}           [config.logFileName=out_%DATE%.log]     - Log 파일명
     * @param       {String=}           [config.datePattern=YYYY-MM-DD]         - Log 파일명 날짜 포맷
     * @param       {String=}           [config.maxSize=50m]                    - Log 파일 최대 사이즈
     * @param       {String|Integer=}   [config.maxFiles=100]                   - Log 파일 개수 (날짜 가능 ex : 10d)
    */
    constructor (config) {
        config = normalizeConfig(config)

        Object.defineProperties(
            this,
            {
                /**
                 * @member      {Object}            _config     - Log 설정
                 * @memberof    logger~Logger
                 * @public
                 * @instance
                 * @readonly
                 * @since       0.0.1
                 * @author      예장해
                */
                _config: {
                    enumerable: true,
                    value: config
                },
                /**
                 * @member      {String}            level       - Log level
                 * @memberof    logger~Logger
                 * @public
                 * @instance
                 * @readonly
                 * @since       0.0.1
                 * @author      예장해
                */
                level: {
                    enumerable: true,
                    value: config.level
                },
                /**
                 * @member      {winston.Logger}    _logger     - Log level
                 * @memberof    logger~Logger
                 * @public
                 * @instance
                 * @readonly
                 * @since       0.0.1
                 * @author      예장해
                */
                _logger: {
                    value: winston.createLogger({
                        level: config.level,
                        format: winston.format.combine(...createFormat(config)),
                        transports: [
                            (() => {
                                let transport

                                switch (true) {
                                    case /^file$/.test(config.transport):
                                        transport = new winston.transports.DailyRotateFile({
                                            filename: path.join(config.logDir, config.logFileName),
                                            datePattern: config.datePattern,
                                            maxSize: config.maxSize,
                                            maxFiles: config.maxFiles
                                        })
                                        break
                                    case /^console$/.test(config.transport):
                                        transport = new winston.transports.Console({
                                            stderrLevels: [
                                                level.ERROR
                                            ],
                                            consoleWarnLevels: [
                                                level.WARN
                                            ]
                                        })
                                        break
                                }

                                return transport
                            })()
                        ]
                    })
                }
            })
    }

    /**
     * @name        debug
     * @memberof    logger~Logger
     * @function
     * @instance
     * @public
     * @desc        파일에 debug 레벨의 로그 작성<br/>
     *              info이하의 로그 레벨에서는 해당 로그가 남지 않음
     * @param       {String}    message     - Log message format
     * @param       {Iterable=} ...args     - Log message data
     * @since       0.0.1
     * @author      예장해
     * @see         {@link https://www.npmjs.com/package/winston winston}
     * @see         {@link https://nodejs.org/dist/latest/docs/api/util.html#util_util_format_format_args util.format}
     * @example
     * const logger = new Logger()
     * logger.debug('log message %s %j', 'hello', {a: 10})
    */
    debug (message, ...args) {
        log(this._logger.debug, new Error().stack, message, ...args)
    }

    /**
     * @name        info
     * @memberof    logger~Logger
     * @function
     * @instance
     * @public
     * @desc        파일에 info 레벨의 로그 작성<br/>
     *              warn 이하의 로그 레벨에서는 해당 로그가 남지 않음
     * @param       {String}    message     - Log message format
     * @param       {Iterable=} ...args     - Log message data
     * @since       0.0.1
     * @author      예장해
     * @see         {@link https://www.npmjs.com/package/winston winston}
     * @see         {@link https://nodejs.org/dist/latest/docs/api/util.html#util_util_format_format_args util.format}
     * @example
     * const logger = new Logger()
     * logger.info('log message %s %j', 'hello', {a: 10})
    */
    info (message, ...args) {
        log(this._logger.info, new Error().stack, message, ...args)
    }

    /**
     * @name        warn
     * @memberof    logger~Logger
     * @function
     * @instance
     * @public
     * @desc        파일에 warn 레벨의 로그 작성<br/>
     *              error 이하의 로그 레벨에서는 해당 로그가 남지 않음
     * @param       {String}    message     - Log message format
     * @param       {Iterable=} ...args     - Log message data
     * @since       0.0.1
     * @author      예장해
     * @see         {@link https://www.npmjs.com/package/winston winston}
     * @see         {@link https://nodejs.org/dist/latest/docs/api/util.html#util_util_format_format_args util.format}
     * @example
     * const logger = new Logger()
     * logger.warn('log message %s %j', 'hello', {a: 10})
    */
    warn (message, ...args) {
        log(this._logger.warn, new Error().stack, message, ...args)
    }

    /**
     * @name        error
     * @memberof    logger~Logger
     * @function
     * @instance
     * @public
     * @desc        파일에 error 레벨의 로그 작성<br/>
     * @param       {String}    message     - Log message format
     * @param       {Iterable=} ...args     - Log message data
     * @since       0.0.1
     * @author      예장해
     * @see         {@link https://www.npmjs.com/package/winston winston}
     * @see         {@link https://nodejs.org/dist/latest/docs/api/util.html#util_util_format_format_args util.format}
     * @example
     * const logger = new Logger()
     * logger.error('log message %s %j', 'hello', {a: 10})
    */
    error (message, ...args) {
        log(this._logger.error, new Error().stack, message, ...args)
    }
}

/**
 * @name        log
 * @memberof    logger~Logger
 * @function
 * @static
 * @private
 * @desc        Log 출력<br/>
 *              callstack에서 로그가 어디서 출력 되었는지 찾아서 로그에 같이 출력
 * @param       {Function}  func        - winston.Logger의 level별 log 메소드<br/>
 *                                        - debug
 *                                        - info
 *                                        - warn
 *                                        - error
 * @param       {String}    callStack   - 로그가 호출된 callstack
 * @param       {String}    message     - Log message format
 * @param       {Iterable=} ...args     - Log message data
 * @since       0.0.1
 * @author      예장해
 * @see         {@link https://www.npmjs.com/package/winston winston}
 * @see         {@link https://nodejs.org/dist/latest/docs/api/util.html#util_util_format_format_args util.format}
*/
function log (func, callStack, message, ...args) {
    let logStack = getLogStack(callStack),
        msg = `${message} ${logStack}`

    func(msg, ...args)
}

/**
 * @name        getLogStack
 * @memberof    logger~Logger
 * @function
 * @static
 * @private
 * @desc        callstack에서 로그가 어디서 출력 되었는지 찾아서 리턴
 * @param       {String}    callStack   - 로그가 호출된 callstack
 * @since       0.0.1
 * @author      예장해
 * @returns     {String}    로그가 호출된 장소
*/
function getLogStack (callStack) {
    let str = callStack.split('\n')[2]

    return str.substring(str.indexOf('('), str.indexOf(')') + 1)
}

/**
 * @name        normalizeConfig
 * @memberof    logger~Logger
 * @function
 * @static
 * @private
 * @desc        Log 설정 기본값 세팅
 * @param       {Object=}           config                                  - Log 설정 데이터
 * @param       {String=}           [config.level=info]                     - Log level<br/>
 *                                                                            설정된 level보다 높은 level의 로그는 남지 않음
 * @param       {Boolean=}          [config.timestamp=true]                 - Log 메시지 날짜 출력 여부
 * @param       {String=}           [config.timeFormat=YYYY-MM-DD HH:mm:ss] - Log 메시지 날짜 포맷
 * @param       {String=}           [config.logDir=$HOME/logs]              - Log 파일 경로
 * @param       {String=}           [config.transport=console]              - Log 출력 타입 (file, console)
 * @param       {String=}           [config.logFileName=out_%DATE%.log]     - Log 파일명
 * @param       {String=}           [config.datePattern=YYYY-MM-DD]         - Log 파일명 날짜 포맷
 * @param       {String=}           [config.maxSize=50m]                    - Log 파일 최대 사이즈
 * @param       {String|Integer=}   [config.maxFiles=100]                   - Log 파일 개수 (날짜 가능 ex : 10d)
 * @since       0.0.1
 * @author      예장해
 * @see         {@link logger~Logger Logger}
 * @returns     {Object}    설정
*/
function normalizeConfig (config) {
    if (!config) {
        config = {}
    }

    if (!config.level) {
        config.level = level.INFO
    }

    if (typeof config.timestamp !== 'boolean') {
        config.timestamp = true
    }

    if (config.timestamp && !config.timeFormat) {
        config.timeFormat = DEFAULT.TIME_FORMAT
    }

    if (!config.transport || !config.transport.match(/^(console|file)$/)) {
        config.transport = 'console'
    }

    if (/^file$/.test(config.transport)) {
        if (config.logDir) {
            if (!path.isAbsolute(config.logDir)) {
                // 절대 경로가 아니면 default 로그 경로를 기준으로 절대 경로로 만듦
                config.logDir = path.join(DEFAULT.LOG_DIR, config.logDir)
            }
        } else {
            // 로그 경로가 설정되지 않으면 DEFAULT 값으로 설정
            config.logDir = DEFAULT.LOG_DIR
        }

        if (!config.logFileName) {
            config.logFileName = DEFAULT.LOG_FILE_NAME
        }

        if (!config.datePattern) {
            config.datePattern = DEFAULT.DATE_PATTERN
        }

        if (!config.maxSize) {
            config.maxSize = DEFAULT.MAX_LOG_SIZE
        }

        if (!config.maxFiles) {
            config.maxFiles = DEFAULT.MAX_FILES
        }
    }

    return config
}

/**
 * @name        createFormat
 * @memberof    logger~Logger
 * @function
 * @static
 * @private
 * @desc        Log Formatter 생성
 * @param       {Object=}           config                                  - Log 설정 데이터
 * @param       {String=}           [config.level=info]                     - Log level<br/>
 *                                                                            설정된 level보다 높은 level의 로그는 남지 않음
 * @param       {Boolean=}          [config.timestamp=true]                 - Log 메시지 날짜 출력 여부
 * @param       {String=}           [config.timeFormat=YYYY-MM-DD HH:mm:ss] - Log 메시지 날짜 포맷
 * @param       {String=}           [config.logDir=$HOME/logs]              - Log 파일 경로
 * @param       {String=}           [config.transport=console]              - Log 출력 타입 (file, console)
 * @param       {String=}           [config.logFileName=out_%DATE%.log]     - Log 파일명
 * @param       {String=}           [config.datePattern=YYYY-MM-DD]         - Log 파일명 날짜 포맷
 * @param       {String=}           [config.maxSize=50m]                    - Log 파일 최대 사이즈
 * @param       {String|Integer=}   [config.maxFiles=100]                   - Log 파일 개수 (날짜 가능 ex : 10d)
 * @since       0.0.1
 * @author      예장해
 * @see         {@link logger~Logger Logger}
 * @see         {@link https://www.npmjs.com/package/winston#formats winston formats}
 * @returns     {Array<Object>}    Log Formatters
*/
function createFormat (config) {
    let formats = [
        winston.format.splat()
    ]

    if (config.timestamp) {
        formats.push(winston.format.timestamp({
            format: config.timeFormat
        }))

        formats.push(winston.format.ms())
    }

    formats.push(
        winston.format.printf(data => {
            let str = ''

            if (data.timestamp) {
                str = data.timestamp
            }

            if (data.ms) {
                str = `${str} ${data.ms}`
            }

            str = `${str} [${data.level.toUpperCase()}] ${data.message}`

            return str
        }))

    return formats
}

module.exports = exports = Logger
